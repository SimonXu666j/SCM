Maven介绍及环境搭建：
Maven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。
下载maven安装包：maven.apache.org，apache-maven-3.5.0-bin.zip
解压
bin目录：包含mvn的运行脚本
boot目录：包含一个类加载器的框架
conf目录：包含一些配置文件
lib目录：maven运行时所有用到的类库


pom文件：
groupId的值就是项目的包名
artifactId的值是模块名（项目名）
maven项目约定的目录结构
         -src
               -main
                   -java
                      -package
               -test 
                   -java
                      -package
               -resources
			   
maven常用构建命令
mvn -v 查看maven版本
        compile 编译
        test   测试
        package  打包
        clean  删除target
        install  安装jar包到本地仓库中

		
maven自动创建目录骨架
archetype插件用于创建符合maven规定的目录骨架
创建目录的两种方式：
1.archetype:generate按照提示进行选择
mvn archetype:generate        回车
2.archetype:generate -DgroupId=组织名，公司网址的反写+项目名
                                     -DartifactId=项目名-模块名
                                     -Dversion=版本号
                                     -Dpackage=代码所存在的包
mvn archetype:generate -DgroupId=com.imooc.maven04
                                     -DartifactId=maven04-demo
                                     -Dversion=1.0.0SNAPSHOT
                                     -Dpackage=com.imooc.maven04-demo
				
				
maven中的坐标和仓库
坐标   
      构件
构件通过坐标作为其唯一标识			
<dependency>
    <groupId>...</groupId>
	<artifactId>...</artifactId>        
	<version>...</version>
</dependency>

仓库（用来管理项目的依赖）
        本地仓库和远程仓库
（全球中央仓库地址：https://repo.maven.apache.org/maven2）
镜像仓库（A提供了和B一样的功能）
更改仓库位置（默认是在C:\Users\Xumin\.m2\repository）						 
修改E:\apache-maven-3.5.0\conf这个目录下的settings.xml这个文件的：
<localRepository>...</localRepository>
然后copy一份settings.xml至E:\repo


在Eclipse中安装maven插件以及创建maven项目

maven的生命周期和插件
完整的项目构建过程包括：
清理、编译、测试、打包、集成测试、验证、部署
maven生命周期：
clean 清理项目
      pre-clean 执行清理前的工作
      clean 清理上一次构建生成的所有文件
      post-clean 执行清理后的文件
default 构建项目（最核心）
      compile test package install
site 生成项目站点
      pre-site  在生成项站点前要完成的工作
      site  生成项目的站点文档
      post-site  在生成项目站点后要完成的工作
      site-deploy  发布生成的站点到服务器上
maven命令都是依赖插件的


Pom.xml解析
pom.xml常用元素介绍（用于项目描述、组织管理、依赖管理和构建信息的管理）
<project></projrct>    根元素
<modelVersion></modelVersion>   指定了当前pom的版本
坐标信息：
<groupId>反写的公司网址+项目名</groupId>
<artifactId>项目名+模块名</artifactId>
<version>版本号</version>      --三个数字组成，第一个0表示大版本号
                                               第二个0表示分支版本号  
                                               第三个0表示小版本号  
snapshot快照版 alpha内测版 beta工测版 Release稳定版 GA正式发布版
<packaging></packaging>       --maven的打包方式，默认是jar   也可以是war包 zip pom 
                    
					
<name>项目的描述名</name>
<url>项目的地址</url>
<discription>项目描述</description>
<developers>开发人员列表</developers>
<licenses>许可证</licenses>
<organization>组织信息</organization>
依赖列表,里面可以包含多个依赖项
<dependencies>
    <dependency>
         <groupId></groupId>
         <artifactId></artifactId>
         <version></version> 
         <type></type>
         <scope></scope>                   --依赖的范围
         <optional></optional>        --设置依赖是否可选，True/False，默认False
         排除依赖传递列表
         <exclusions>
                 <exclusion>
                 </exclusion>
        </exclusions> 
    </dependency>
</dependencies>
依赖的管理
<dependencyManagement>
      <dependencies>
该依赖并不会被运行，即不会被引入到实际的依赖中，主要用于定义在父模块中，供子模块继承用
              <dependency>
              </dependency>
      </dependencies>
</dependencyManagement>
<build>          --为构建行为提供相应的支持
   <plugins>   --插件列表
        <plugin>  
             <groupId></groupId>
             <artifactId></artifactId>
             <version></version> 
        </plugin>  
   </plugins>
</build>  
<parent></parent>     --用于子模块对父模块的继承
<modules>   --聚合运行多个的maven项目,指定多个模块一起编译
    <module>
    </module>
</modules>   


依赖范围（用来控制依赖与三种classpath的关系）
maven中的三种classpath：
1.编译
2.测试
3.运行
Dependecny Scope：
compile：默认的范围，编译测试运行都有效
provided：在编译和测试时有效
runtime：在测试和运行时有效
test：只在测试时有效
system：与本机系统相关联，可移植性差
import：导入的范围，它只使用在dependencyManagement中，表示从其它的pom中导入dependency的配置


依赖传递
<dependency></dependency>    --依赖
<exclusion> </exclusion>         --排除传递依赖
依赖冲突
1.短路优先

2.先声明先优先
如果路径长度相同，则谁先声明，先解析谁


聚合和继承
新建父pom
继承父pom


课程总结：
maven下载和环境变量
maven目录骨架的说明
    pom.xml用于管理项目的依赖和构建过程
常用的maven命令
仓库和坐标
在eclipse安装和创建maven项目
生命周期，pom.xml以及依赖、聚合、继承
eclipse中创建web项目和jetty插件的安装
